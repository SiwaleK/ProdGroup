// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: sku.sql

package db

import (
	"context"
	
	"encoding/json"
	"time"
)

const getPaymentConfig = `-- name: GetPaymentConfig :many
SELECT 
  br.account_name,
  br.account_code
FROM
  branch br
`

type GetPaymentConfigRow struct {
	AccountName *string `json:"account_name"`
	AccountCode *string `json:"account_code"`
}

func (q *Queries) GetPaymentConfig(ctx context.Context) ([]GetPaymentConfigRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentConfig)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPaymentConfigRow{}
	for rows.Next() {
		var i GetPaymentConfigRow
		if err := rows.Scan(&i.AccountName, &i.AccountCode); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentMethod = `-- name: GetPaymentMethod :many
SELECT paymentmethodid, paymentname FROM payment_method
`

func (q *Queries) GetPaymentMethod(ctx context.Context) ([]PaymentMethod, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentMethod)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentMethod{}
	for rows.Next() {
		var i PaymentMethod
		if err := rows.Scan(&i.Paymentmethodid, &i.Paymentname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPosClientMethod = `-- name: GetPosClientMethod :many
SELECT
    pc.is_cash,
    pc.is_paotang,
    pc.is_qrcode,
    pc.is_tongfah,
    pc.is_coupon,
    br.account_name,
    br.account_code
FROM
    posclient pc
JOIN
    branch br ON pc.branch_id = br.branch_id
WHERE
    pc.pos_client_id = $1
`

type GetPosClientMethodRow struct {
	IsCash      *int16  `json:"is_cash"`
	IsPaotang   *int16  `json:"is_paotang"`
	IsQrcode    *int16  `json:"is_qrcode"`
	IsTongfah   *int16  `json:"is_tongfah"`
	IsCoupon    *int16  `json:"is_coupon"`
	AccountName *string `json:"account_name"`
	AccountCode *string `json:"account_code"`
}

func (q *Queries) GetPosClientMethod(ctx context.Context, posClientID *string) ([]GetPosClientMethodRow, error) {
	rows, err := q.db.QueryContext(ctx, getPosClientMethod, posClientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPosClientMethodRow{}
	for rows.Next() {
		var i GetPosClientMethodRow
		if err := rows.Scan(
			&i.IsCash,
			&i.IsPaotang,
			&i.IsQrcode,
			&i.IsTongfah,
			&i.IsCoupon,
			&i.AccountName,
			&i.AccountCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProdgroup = `-- name: GetProdgroup :many
SELECT prodgroupid, th_name, en_name FROM prodgroup
`

func (q *Queries) GetProdgroup(ctx context.Context) ([]Prodgroup, error) {
	rows, err := q.db.QueryContext(ctx, getProdgroup)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Prodgroup{}
	for rows.Next() {
		var i Prodgroup
		if err := rows.Scan(&i.Prodgroupid, &i.ThName, &i.EnName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProdgroupByID = `-- name: GetProdgroupByID :many
SELECT prodgroupid, th_name, en_name FROM prodgroup
WHERE prodgroupid =$1
`

func (q *Queries) GetProdgroupByID(ctx context.Context, prodgroupid int32) ([]Prodgroup, error) {
	rows, err := q.db.QueryContext(ctx, getProdgroupByID, prodgroupid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Prodgroup{}
	for rows.Next() {
		var i Prodgroup
		if err := rows.Scan(&i.Prodgroupid, &i.ThName, &i.EnName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPromotion = `-- name: GetPromotion :many
SELECT promotionid, promotiontitle, promotiontype, startdate, enddate, description, condition FROM promotion
`

func (q *Queries) GetPromotion(ctx context.Context) ([]Promotion, error) {
	rows, err := q.db.QueryContext(ctx, getPromotion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Promotion{}
	for rows.Next() {
		var i Promotion
		if err := rows.Scan(
			&i.Promotionid,
			&i.Promotiontitle,
			&i.Promotiontype,
			&i.Startdate,
			&i.Enddate,
			&i.Description,
			&i.Condition,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPromotionAppliedItemID = `-- name: GetPromotionAppliedItemID :many
SELECT promotiondetail_id, promotionid, skuid FROM promotion_applied_items_id
`

func (q *Queries) GetPromotionAppliedItemID(ctx context.Context) ([]PromotionAppliedItemsID, error) {
	rows, err := q.db.QueryContext(ctx, getPromotionAppliedItemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PromotionAppliedItemsID{}
	for rows.Next() {
		var i PromotionAppliedItemsID
		if err := rows.Scan(&i.PromotiondetailID, &i.Promotionid, &i.Skuid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPromotionByID = `-- name: GetPromotionByID :one
SELECT promotionid, promotiontitle, promotiontype, startdate, enddate, description, condition FROM promotion 
WHERE Promotionid =$1
`

func (q *Queries) GetPromotionByID(ctx context.Context, promotionid *string) (Promotion, error) {
	row := q.db.QueryRowContext(ctx, getPromotionByID, promotionid)
	var i Promotion
	err := row.Scan(
		&i.Promotionid,
		&i.Promotiontitle,
		&i.Promotiontype,
		&i.Startdate,
		&i.Enddate,
		&i.Description,
		&i.Condition,
	)
	return i, err
}

const postPromotion = `-- name: PostPromotion :exec
WITH promotion AS (
  INSERT INTO promotion (Promotionid,Promotiontitle, PromotionType, Startdate, Enddate, Description, Condition)
  VALUES ($1, $2, $3, $4, $5, $6,$7)
  RETURNING promotionid, promotiontitle, promotiontype, startdate, enddate, description, condition
),
promotion_applied_items_id AS (
  INSERT INTO promotion_applied_items_id (Promotiondetail_id, Promotionid, skuid)
  VALUES ($8, (SELECT Promotionid FROM promotion), $9)
  RETURNING promotiondetail_id, promotionid, skuid
)
SELECT promotion.promotionid, promotion.promotiontitle, promotion.promotiontype, promotion.startdate, promotion.enddate, promotion.description, promotion.condition, promotion_applied_items_id.promotiondetail_id, promotion_applied_items_id.promotionid, promotion_applied_items_id.skuid
FROM promotion, promotion_applied_items_id
`

type PostPromotionParams struct {
	Promotionid       *string  `json:"promotionid"`
	Promotiontitle    *string  `json:"promotiontitle"`
	Promotiontype     int32           `json:"promotiontype"`
	Startdate         time.Time       `json:"startdate"`
	Enddate           time.Time       `json:"enddate"`
	Description       *string  `json:"description"`
	Condition         json.RawMessage `json:"condition"`
	PromotiondetailID *string  `json:"promotiondetail_id"`
	Skuid             *string  `json:"skuid"`
}

type PostPromotionRow struct {
	Promotionid       *string  `json:"promotionid"`
	Promotiontitle    *string  `json:"promotiontitle"`
	Promotiontype     int32           `json:"promotiontype"`
	Startdate         time.Time       `json:"startdate"`
	Enddate           time.Time       `json:"enddate"`
	Description       *string  `json:"description"`
	Condition         json.RawMessage `json:"condition"`
	PromotiondetailID *string  `json:"promotiondetail_id"`
	Promotionid_2     *string  `json:"promotionid_2"`
	Skuid             *string  `json:"skuid"`
}

func (q *Queries) PostPromotion(ctx context.Context, arg PostPromotionParams) error {
	_, err := q.db.ExecContext(ctx, postPromotion,
		arg.Promotionid,
		arg.Promotiontitle,
		arg.Promotiontype,
		arg.Startdate,
		arg.Enddate,
		arg.Description,
		arg.Condition,
		arg.PromotiondetailID,
		arg.Skuid,
	)
	return err
}

const postPromotionApplied = `-- name: PostPromotionApplied :exec
INSERT INTO promotion_applied_items_id (Promotiondetail_id, Promotionid, skuid)
VALUES ($1, $2, $3)
RETURNING promotiondetail_id, promotionid, skuid
`

type PostPromotionAppliedParams struct {
	PromotiondetailID *string `json:"promotiondetail_id"`
	Promotionid       *string `json:"promotionid"`
	Skuid             *string `json:"skuid"`
}

func (q *Queries) PostPromotionApplied(ctx context.Context, arg PostPromotionAppliedParams) error {
	_, err := q.db.ExecContext(ctx, postPromotionApplied, arg.PromotiondetailID, arg.Promotionid, arg.Skuid)
	return err
}

const postPromotionTable = `-- name: PostPromotionTable :exec
INSERT INTO promotion (Promotionid, Promotiontitle, PromotionType, Startdate, Enddate, Description, Condition)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING promotionid, promotiontitle, promotiontype, startdate, enddate, description, condition
`

type PostPromotionTableParams struct {
	Promotionid    *string  `json:"promotionid"`
	Promotiontitle *string  `json:"promotiontitle"`
	Promotiontype  int32           `json:"promotiontype"`
	Startdate      time.Time       `json:"startdate"`
	Enddate        time.Time       `json:"enddate"`
	Description    *string  `json:"description"`
	Condition      json.RawMessage `json:"condition"`
}

func (q *Queries) PostPromotionTable(ctx context.Context, arg PostPromotionTableParams) error {
	_, err := q.db.ExecContext(ctx, postPromotionTable,
		arg.Promotionid,
		arg.Promotiontitle,
		arg.Promotiontype,
		arg.Startdate,
		arg.Enddate,
		arg.Description,
		arg.Condition,
	)
	return err
}
