// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: sku.sql

package db

import (
	"context"
	"database/sql"
)

const getProdgroup = `-- name: GetProdgroup :many
SELECT prodgroupid, th_name, en_name FROM prodgroup
`

func (q *Queries) GetProdgroup(ctx context.Context) ([]Prodgroup, error) {
	rows, err := q.db.QueryContext(ctx, getProdgroup)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Prodgroup{}
	for rows.Next() {
		var i Prodgroup
		if err := rows.Scan(&i.Prodgroupid, &i.ThName, &i.EnName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPromotion = `-- name: GetPromotion :many
SELECT promotionid, promotiontype, startdate, enddate, description, conditions FROM Promotion
`

func (q *Queries) GetPromotion(ctx context.Context) ([]Promotion, error) {
	rows, err := q.db.QueryContext(ctx, getPromotion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Promotion{}
	for rows.Next() {
		var i Promotion
		if err := rows.Scan(
			&i.Promotionid,
			&i.Promotiontype,
			&i.Startdate,
			&i.Enddate,
			&i.Description,
			&i.Conditions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPromotionAppliedItemID = `-- name: GetPromotionAppliedItemID :many
SELECT promotiondetailid, promotionid, skuid FROM promotion_applied_items_id
`

func (q *Queries) GetPromotionAppliedItemID(ctx context.Context) ([]PromotionAppliedItemsID, error) {
	rows, err := q.db.QueryContext(ctx, getPromotionAppliedItemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PromotionAppliedItemsID{}
	for rows.Next() {
		var i PromotionAppliedItemsID
		if err := rows.Scan(&i.Promotiondetailid, &i.Promotionid, &i.Skuid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPromotionByID = `-- name: GetPromotionByID :one
SELECT promotionid, promotiontype, startdate, enddate, description, conditions FROM Promotion 
WHERE Promotionid =$1
`

func (q *Queries) GetPromotionByID(ctx context.Context, promotionid sql.NullString) (Promotion, error) {
	row := q.db.QueryRowContext(ctx, getPromotionByID, promotionid)
	var i Promotion
	err := row.Scan(
		&i.Promotionid,
		&i.Promotiontype,
		&i.Startdate,
		&i.Enddate,
		&i.Description,
		&i.Conditions,
	)
	return i, err
}
