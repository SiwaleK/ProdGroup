package repository

import (
	"context"
	"database/sql"

	"github.com/SiwaleK/ProdGroup/model"
)

type ProdgroupRepository interface {
	GetProdgroup(ctx context.Context) (*[]model.Prodgroup, error)
}

type DBProdgroupRepository struct {
	db *sql.DB
}

func NewProdgroupRepositroy(db *sql.DB) ProdgroupHandlerImpl {
	return &DBProdgroupRepository{
		db: db,
	}
}

func (h *DBProdgroupRepository) GetProdgroup(ctx context.Context) ([]Prodgroup, error) {
	prodgroups := &[]model.Prodgroup{}
	rows, err := h.db.QueryContext(ctx, "GetProdgroup")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var pg Prodgroup
		err := rows.Scan(&pg.Prodgroupid, &pg.ThName, &pg.EnName)
		if err != nil {
			return nil, err
		}
		prodgroups = append(prodgroups, pg)
	}

	if err = rows.Err(); err != nil {
		return nil, err
	}

	return prodgroups, nil
}
